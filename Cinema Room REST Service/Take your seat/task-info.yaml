type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    public class Seat {
        private int row;
        private int column;

        public Seat() {}

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

    }
  learner_created: true
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.web.bind.annotation.*;

    import java.util.List;
    import java.util.Map;

    @RestController
    public class CinemaController {

        List<Seat> seatList = List.of(
                new Seat(1,1), new Seat(1,2), new Seat(1,3),
                new Seat(1,4), new Seat(1,5), new Seat(1,6),
                new Seat(1,7), new Seat(1,8), new Seat(1,9),
                new Seat(2,1), new Seat(2,2), new Seat(2,3),
                new Seat(2,4), new Seat(2,5), new Seat(2,6),
                new Seat(2,7), new Seat(2,8), new Seat(2,9),
                new Seat(3,1), new Seat(3,2), new Seat(3,3),
                new Seat(3,4), new Seat(3,5), new Seat(3,6),
                new Seat(3,7), new Seat(3,8), new Seat(3,9),
                new Seat(4,1), new Seat(4,2), new Seat(4,3),
                new Seat(4,4), new Seat(4,5), new Seat(4,6),
                new Seat(4,7), new Seat(4,8), new Seat(4,9),
                new Seat(5,1), new Seat(5,2), new Seat(5,3),
                new Seat(5,4), new Seat(5,5), new Seat(5,6),
                new Seat(5,7), new Seat(5,8), new Seat(5,9),
                new Seat(6,1), new Seat(6,2), new Seat(6,3),
                new Seat(6,4), new Seat(6,5), new Seat(6,6),
                new Seat(6,7), new Seat(6,8), new Seat(6,9),
                new Seat(7,1), new Seat(7,2), new Seat(7,3),
                new Seat(7,4), new Seat(7,5), new Seat(7,6),
                new Seat(7,7), new Seat(7,8), new Seat(7,9),
                new Seat(8,1), new Seat(8,2), new Seat(8,3),
                new Seat(8,4), new Seat(8,5), new Seat(8,6),
                new Seat(8,7), new Seat(8,8), new Seat(8,9),
                new Seat(9,1), new Seat(9,2), new Seat(9,3),
                new Seat(9,4), new Seat(9,5), new Seat(9,6),
                new Seat(9,7), new Seat(9,8), new Seat(9,9)
                );
        int totalRows = 9;
        int totalColumns = 9;

        @GetMapping("/seats")
        public Map<String, ?> getSeats() {
            return Map.of(
                    "total_rows", totalRows,
                    "total_columns", totalColumns,
                    "available_seats", seatList
            );
        }


    }
  learner_created: true
- name: src/cinema/Cinema.java
  visible: true
  text: |
    package cinema;

    import java.util.ArrayList;
    import java.util.List;

    public class Cinema {

        private int totalRows;
        private int totalCols;

        private List<Seat> seatList = new ArrayList<>();;


        public Cinema(int rows, int cols){
            totalRows = rows;
            totalCols = cols;

            for (int i = 1; i <= rows; i++){
                for (int j = 1; j <= cols; j++){
                    seatList.add(new Seat(i, j));
                }
            }
        }

        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalCols() {
            return totalCols;
        }

        public List<Seat> getSeatList() {
            return seatList;
        }
    }
  learner_created: true
- name: src/cinema/Error.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/946/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 06 Aug 2021 02:42:52 UTC
record: 2
